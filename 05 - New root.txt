Option Compare Database

' ===== In order to have consistent (7 digit, numbers-only) roots, creating New_root cols to better enable GROUP BY =====

Public Sub new_roots()

    DoCmd.SetWarnings False
    

        Dim sqlrun As String
        
' AAA_AUM_Q#
        sqlrun = "ALTER TABLE AAA_AUM_Q1 ADD COLUMN New_root TEXT;" ' Needs to be text in order to keep leading 0s
        DoCmd.RunSQL (sqlrun)

        sqlrun = "UPDATE AAA_AUM_Q1 SET AAA_AUM_Q1.New_root = RIGHT(AAA_AUM_Q1.root, 7);"
        DoCmd.RunSQL (sqlrun)


        sqlrun = "ALTER TABLE AAA_AUM_Q2 ADD COLUMN New_root TEXT;" ' Needs to be text in order to keep leading 0s
        DoCmd.RunSQL (sqlrun)

        sqlrun = "UPDATE AAA_AUM_Q2 SET AAA_AUM_Q2.New_root = RIGHT(AAA_AUM_Q2.root, 7);"
        DoCmd.RunSQL (sqlrun)


        sqlrun = "ALTER TABLE AAA_AUM_Q3 ADD COLUMN New_root TEXT;" ' Needs to be text in order to keep leading 0s
        DoCmd.RunSQL (sqlrun)

        sqlrun = "UPDATE AAA_AUM_Q3 SET AAA_AUM_Q3.New_root = RIGHT(AAA_AUM_Q3.root, 7);"
        DoCmd.RunSQL (sqlrun)


         ' Commented the below as AAA_AUM_Q4 currently does not exist (not doing Q4 in 2016).
'        sqlrun = "ALTER TABLE AAA_AUM_Q4 ADD COLUMN New_root TEXT;" ' Needs to be text in order to keep leading 0s
'        DoCmd.RunSQL (sqlrun)
'
'        sqlrun = "UPDATE AAA_AUM_Q4 SET AAA_AUM_Q4.New_root = RIGHT(AAA_AUM_Q4.root, 7);"
'        DoCmd.RunSQL (sqlrun)



' STATIC_DATA
        ' Converting STATIC_DATA Portfolio Code (root) col to text (may be redundant now since now using New_root):
        sqlrun = "ALTER TABLE STATIC_DATA ALTER COLUMN [Portfolio Code] TEXT;"
        DoCmd.RunSQL (sqlrun)


        sqlrun = "ALTER TABLE STATIC_DATA ADD COLUMN New_root TEXT;"
        DoCmd.RunSQL (sqlrun)

        sqlrun = "UPDATE STATIC_DATA SET STATIC_DATA.New_root = [STATIC_DATA].[Portfolio Code]"
        DoCmd.RunSQL (sqlrun)


' FEES_GENERATED_ANS_Q#
    ' Q1
        sqlrun = "ALTER TABLE FEES_GENERATED_ANS_Q1 ADD COLUMN New_root TEXT;"
        DoCmd.RunSQL (sqlrun)
        
        sqlrun = "UPDATE FEES_GENERATED_ANS_Q1 SET FEES_GENERATED_ANS_Q1.New_root = FEES_GENERATED_ANS_Q1.MVRACI;"
        DoCmd.RunSQL (sqlrun)


    ' Q2
        sqlrun = "ALTER TABLE FEES_GENERATED_ANS_Q2 ADD COLUMN New_root TEXT;"
        DoCmd.RunSQL (sqlrun)
        
        sqlrun = "UPDATE FEES_GENERATED_ANS_Q2 SET FEES_GENERATED_ANS_Q2.New_root = FEES_GENERATED_ANS_Q2.MVRACI;"
        DoCmd.RunSQL (sqlrun)
        
        
    ' Q3
        sqlrun = "ALTER TABLE FEES_GENERATED_ANS_Q3 ADD COLUMN New_root TEXT;"
        DoCmd.RunSQL (sqlrun)
        
        sqlrun = "UPDATE FEES_GENERATED_ANS_Q3 SET FEES_GENERATED_ANS_Q3.New_root = FEES_GENERATED_ANS_Q3.dr_root;"
        DoCmd.RunSQL (sqlrun)

    
'    ' Q4
'    ' Commented the below as FEES_GENERATED_ANS_Q4 currently does not exist (not doing Q4 in 2016).
'        sqlrun = "ALTER TABLE FEES_GENERATED_ANS_Q4 ADD COLUMN New_root TEXT;"
'        DoCmd.RunSQL (sqlrun)
'
'        sqlrun = "UPDATE FEES_GENERATED_ANS_Q4 SET FEES_GENERATED_ANS_Q4.New_root = FEES_GENERATED_ANS_Q4.MVRACI;"
'        DoCmd.RunSQL (sqlrun)




'Charge_type in FEES_GENERATED_ANS_Q#
'Adding charge_type (IM/IM_VAT/SC) col to fees_generated_ans_q# - Had issue updating Calculation_Q# directly using 'LIKE', so doing this as workaround
        
    'Q1
        sqlrun = "ALTER TABLE FEES_GENERATED_ANS_Q1 ADD COLUMN Charge_type TEXT;"
        DoCmd.RunSQL (sqlrun)
    
        ' 1Q&2Q16 narrative col doesn't differentiate IM_fee and IM_VAT_fee (thus placing "IM_fee_or_IM_VAT_fee")
        sqlrun = "UPDATE FEES_GENERATED_ANS_Q1 SET FEES_GENERATED_ANS_Q1.Charge_type = ""IM_fee_or_IM_VAT_fee"" WHERE (([FEES_GENERATED_ANS_Q1].[NARRATIVE] Like ""*IM*""));"
        DoCmd.RunSQL (sqlrun)

        sqlrun = "UPDATE FEES_GENERATED_ANS_Q1 SET FEES_GENERATED_ANS_Q1.Charge_type = ""SC_fee"" WHERE (([FEES_GENERATED_ANS_Q1].[NARRATIVE] Like ""*Safe Custody Fee*""));"
        DoCmd.RunSQL (sqlrun)
    
    'Q2
        'Adding charge_type (IM/IM_VAT/SC) col to fees_generated_ans_q# - Had issue updating Calculation_Q# directly using 'LIKE', so doing this as workaround
        sqlrun = "ALTER TABLE FEES_GENERATED_ANS_Q2 ADD COLUMN Charge_type TEXT;"
        DoCmd.RunSQL (sqlrun)
    
        ' 1Q&2Q16 narrative col doesn't differentiate IM_fee and IM_VAT_fee (thus placing "IM_fee_or_IM_VAT_fee")
        sqlrun = "UPDATE FEES_GENERATED_ANS_Q2 SET FEES_GENERATED_ANS_Q2.Charge_type = ""IM_fee_or_IM_VAT_fee"" WHERE (([FEES_GENERATED_ANS_Q2].[NARRATIVE] Like ""*IM*""));"
        DoCmd.RunSQL (sqlrun)

        sqlrun = "UPDATE FEES_GENERATED_ANS_Q2 SET FEES_GENERATED_ANS_Q2.Charge_type = ""SC_fee"" WHERE (([FEES_GENERATED_ANS_Q2].[NARRATIVE] Like ""*Safe Custody Fee*""));"
        DoCmd.RunSQL (sqlrun)
    
    'Q3
        'Adding charge_type (IM/IM_VAT/SC) col to fees_generated_ans_q# - Had issue updating Calculation_Q# directly using 'LIKE', so doing this as workaround
        sqlrun = "ALTER TABLE FEES_GENERATED_ANS_Q3 ADD COLUMN Charge_type TEXT;"
        DoCmd.RunSQL (sqlrun)
    
        sqlrun = "UPDATE FEES_GENERATED_ANS_Q3 SET FEES_GENERATED_ANS_Q3.Charge_type = ""IM_fee"" WHERE (([FEES_GENERATED_ANS_Q3].[dr_comment] Like ""IM Fee*""));"
        DoCmd.RunSQL (sqlrun)
        
        sqlrun = "UPDATE FEES_GENERATED_ANS_Q3 SET FEES_GENERATED_ANS_Q3.Charge_type = ""IM_VAT_fee"" WHERE (([FEES_GENERATED_ANS_Q3].[dr_comment] Like ""VAT IM Fee*""));"
        DoCmd.RunSQL (sqlrun)

        sqlrun = "UPDATE FEES_GENERATED_ANS_Q3 SET FEES_GENERATED_ANS_Q3.Charge_type = ""SC_fee"" WHERE (([FEES_GENERATED_ANS_Q3].[dr_comment] Like ""*Safe Custody Fee*""));"
        DoCmd.RunSQL (sqlrun)
        





    DoCmd.SetWarnings True
    
End Sub

